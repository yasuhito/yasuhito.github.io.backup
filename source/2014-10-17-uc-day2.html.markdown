---
title: アンダースタンディング コンピュテーション 2
date: 2014-10-17 08:29 UTC
tags: uc, ruby, programming, book
---

## 変数を使えるようにする

変数を簡約するために、変数名から値へのマッピングとして環境を導入する。実装は `Hash` を使うだけ。

```ruby
class Variable < Struct.new(:name)
  def reduce(environment)
    environment[name]
  end
end
```

そして簡約できるモノの `#reduce` に環境を渡せるようにする。たとえば足し算はこんな感じ。

$$\frac{\langle e\_1, \sigma \rangle \rightsquigarrow\_e e'\_1}
       {\langle e\_1 + e\_2, \sigma \rangle \rightsquigarrow\_e e'\_1 + e\_2}$$

$$\frac{\langle e\_2, \sigma \rangle \rightsquigarrow\_e e'\_2}
       {\langle v\_1 + e\_2, \sigma \rangle \rightsquigarrow\_e v\_1 + e'\_2}$$

$$\frac{}
       {\langle n\_1 + n\_2, \sigma \rangle \rightsquigarrow\_e n} \mathsf{if} n = n\_1 + n\_2$$

```ruby
class Add < Struct.new(:left, :right)
  def reduce(environment)
    if left.reducible?
      Add.new(left.reduce(environment), right)
    elsif right.reducible?
      Add.new(left, right.reduce(environment))
    else
      Number.new(left.value + right.value)
    end
  end
end
```
