<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-05-25T10:02:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>OpenFlowのインストラクションとアクション</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/25/openflow-instructions-actions.html"/>
    <id>http://blog.url.com/2015/05/25/openflow-instructions-actions.html</id>
    <published>2015-05-25T10:02:00+09:00</published>
    <updated>2015-05-25T10:03:28+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ryubook に記述があったのでメモ.
http://osrg.github.io/ryu-book/ja/html/openflow_protocol.html#id3&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emacs 24.4 のインストール</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/24/emacs-reboot.html"/>
    <id>http://blog.url.com/2014/10/24/emacs-reboot.html</id>
    <published>2014-10-24T09:24:00+09:00</published>
    <updated>2014-12-16T10:43:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;僕はメインマシンが Mac なので, &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; でインストー
ルします. &lt;code&gt;brew install&lt;/code&gt; 一発でインストールできるのでほんと便利. 今回
はとりあえず全部入りでインストールしてみました.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% brew install emacs --cocoa --keep-ctags --with-d-bus --with-gnutls --with-imagemagick --with-librsvg --with-mailutils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに, どういうコンパイルオプションがあるかは &lt;code&gt;brew info emacs&lt;/code&gt; で確認できます.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew info emacs                                                                                                                                         rvm:ruby-2.0.0-p576
emacs: stable 24.4 (bottled), HEAD
https://www.gnu.org/software/emacs/
/usr/local/Cellar/emacs/24.3 (3911 files, 116M)
  Built from source with: --keep-ctags, --cocoa, --srgb
/usr/local/Cellar/emacs/24.4 (3924 files, 118M) *
  Built from source with: --cocoa, --keep-ctags, --with-d-bus, --with-gnutls, --with-imagemagick, --with-librsvg, --with-mailutils
From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/emacs.rb
==&amp;gt; Dependencies
Build: xz ✔, pkg-config ✔
Optional: d-bus ✔, gnutls ✔, librsvg ✔, imagemagick ✔, mailutils ✔, glib ✔
==&amp;gt; Options
--cocoa
        Build a Cocoa version of emacs
--keep-ctags
        Don't remove the ctags executable that emacs provides
--use-git-head
        Use Savannah (faster) git mirror for HEAD builds
--with-d-bus
        Build with d-bus support
--with-glib
        Build with glib support
--with-gnutls
        Build with gnutls support
--with-imagemagick
        Build with imagemagick support
--with-librsvg
        Build with librsvg support
--with-mailutils
        Build with mailutils support
--with-x
        Include X11 support
--HEAD
        install HEAD version
==&amp;gt; Caveats
To have launchd start emacs at login:
    ln -sfv /usr/local/opt/emacs/*.plist ~/Library/LaunchAgents
Then to load emacs now:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.emacs.plist

WARNING: launchctl will fail when run under tmux.
.app bundles were installed.
Run `brew linkapps` to symlink these to /Applications.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイルオプションがわりとたくさんありますが, 次のように選びました.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最新版の追っかけ (&lt;code&gt;--HEAD&lt;/code&gt; と &lt;code&gt;--use-git-head&lt;/code&gt;) もしてません. 普通に
よく落ちるし, アップデートしてコンパイルする時間がもったいないからです.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストールが終わったら, /Applications/Emacs.app を作ります.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% brew linkapps
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>アンダースタンディング コンピュテーション 3</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/19/uc-day3.html"/>
    <id>http://blog.url.com/2014/10/19/uc-day3.html</id>
    <published>2014-10-19T19:05:00+09:00</published>
    <updated>2014-12-16T10:43:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;文 (statement) の目的は、評価されることで抽象機械の状態を変更すること。いままで扱ってきた式の目的は、評価することで新しい式を生成すること。&lt;/p&gt;

&lt;h3&gt;何もしない文&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <title>アンダースタンディング コンピュテーション 2</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/17/uc-day2.html"/>
    <id>http://blog.url.com/2014/10/17/uc-day2.html</id>
    <published>2014-10-17T17:29:00+09:00</published>
    <updated>2014-12-16T10:43:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;変数を使えるようにする&lt;/h2&gt;

&lt;p&gt;変数を簡約するために、変数名から値へのマッピングとして環境を導入する。&lt;/p&gt;

&lt;p&gt;$$\langle x, \sigma \rangle \rightsquigarrow_e \sigma(x)\ if\ x \in dom(\sigma)$$&lt;/p&gt;

&lt;p&gt;実装は &lt;code&gt;Hash&lt;/code&gt; を使うだけ。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Variable&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして簡約できる項の &lt;code&gt;#reduce&lt;/code&gt; に環境を渡せるようにする。&lt;/p&gt;

&lt;p&gt;たとえば足し算はこんな感じ。&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_1, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1}
       {\langle e_1 + e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1 + e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_2}
       {\langle v_1 + e_2, \sigma \rangle \rightsquigarrow_e v_1 + e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$\langle n_1 + n_2, \sigma \rangle \rightsquigarrow_e n\ \mathsf{if}\ n = n_1 + n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;かけ算はこうなる。&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_1, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1}
       {\langle e_1 \ast e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1 \ast e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_2}
       {\langle v_1 \ast e_2, \sigma \rangle \rightsquigarrow_e v_1 \ast e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$\langle n_1 \ast n_2, \sigma \rangle \rightsquigarrow_e n\ \mathsf{if}\ n = n_1 \times n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiply&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;less than (&amp;lt;) はこう。&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_1, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1}
       {\langle e_1 &amp;lt; e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_1 &amp;lt; e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{\langle e_2, \sigma \rangle \rightsquigarrow_e e&amp;rsquo;_2}
       {\langle v_1 &amp;lt; e_2, \sigma \rangle \rightsquigarrow_e v_1 &amp;lt; e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$\langle n_1 &amp;lt; n_2, \sigma \rangle \rightsquigarrow_e \tt{true}\ \mathsf{if}\ n_1 &amp;lt; n_2$$&lt;/p&gt;

&lt;p&gt;$$\langle n_1 &amp;lt; n_2, \sigma \rangle \rightsquigarrow_e \tt{false}\ \mathsf{if}\ n_1 \geq n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reduce&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;LessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;LessThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;仮想機械が環境を持てるようにする&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Machine&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>アンダースタンディング コンピュテーション 1</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/17/uc-day1.html"/>
    <id>http://blog.url.com/2014/10/17/uc-day1.html</id>
    <published>2014-10-17T10:59:00+09:00</published>
    <updated>2014-12-16T10:43:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;今日からアンダースタンディング コンピュテーション (オライリー) を読みはじめた。第 1 章は Ruby 入門なので飛ばす。
第 2 章では SIMPLE という言語の小ステップスタイルな操作的意味論 (p.21) を Ruby で記述する。&lt;/p&gt;

&lt;p&gt;操作的意味論を Ruby で記述する意義については p.22 に下の注意があった。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ruby を使うことの大きな欠点は、単純な言語を説明するのにより複雑な言語を使っていることで、おそらく哲学的意義を損ねています。
数学的規則は意味論の信頼できる記述であり、Ruby を使うのは数学的規則が意味することを理解しやすくするため、
であることを忘れないでください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;数値とブール値&lt;/h3&gt;

&lt;p&gt;数値やブール値は値なので簡約できない。これを表すのに &lt;code&gt;#reducible?&lt;/code&gt; メソッドで &lt;code&gt;false&lt;/code&gt; を返すようにしておく。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reducible?&lt;/span&gt;
    &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reducible?&lt;/span&gt;
    &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;足し算&lt;/h3&gt;

&lt;p&gt;$$\frac{e_1 \to e&amp;rsquo;_1}
       {e_1 + e_2 \to e&amp;rsquo;_1 + e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{e_2 \to e&amp;rsquo;_2}
       {v_1 + e_2 \to v_1 + e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$n_1 + n_2 \to n\ \mathsf{if}\ n = n_1 + n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;irb で実行するとこんな感じ。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt; Add.new(Number.new(3), Number.new(4)).reduce
=&amp;gt; &amp;lt;&amp;lt;7&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;かけ算&lt;/h3&gt;

&lt;p&gt;$$\frac{e_1 \to e&amp;rsquo;_1}
       {e_1 \ast e_2 \to e&amp;rsquo;_1 \ast e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{e_2 \to e&amp;rsquo;_2}
       {v_1 \ast e_2 \to v_1 \ast e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$n_1 \ast n_2 \to n\ \mathsf{if}\ n = n_1 \times n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiply&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;irb で実行するとこんな感じ。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt; Multiply.new(Add.new(Number.new(1), Number.new(2)), Number.new(3))
=&amp;gt; &amp;lt;&amp;lt;1 + 2 * 3&amp;gt;&amp;gt;
&amp;gt;&amp;gt; Multiply.new(Add.new(Number.new(1), Number.new(2)), Number.new(3)).reduce
=&amp;gt; &amp;lt;&amp;lt;3 * 3&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Less than (&amp;lt;)&lt;/h3&gt;

&lt;p&gt;$$\frac{e_1 \to e&amp;rsquo;_1}
       {e_1 &amp;lt; e_2 \to e&amp;rsquo;_1 &amp;lt; e_2}$$&lt;/p&gt;

&lt;p&gt;$$\frac{e_2 \to e&amp;rsquo;_2}
       {v_1 &amp;lt; e_2 \to v_1 &amp;lt; e&amp;rsquo;_2}$$&lt;/p&gt;

&lt;p&gt;$$n_1 &amp;lt; n_2 \to \tt{true}\ \mathsf{if}\ n = n_1 &amp;lt; n_2$$&lt;/p&gt;

&lt;p&gt;$$n_1 &amp;lt; n_2 \to \tt{false}\ \mathsf{if}\ n = n_1 \geq n_2$$&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LessThan&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reduce&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;LessThan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="no"&gt;LessThan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="no"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;仮想機械&lt;/h3&gt;

&lt;p&gt;仮想機械はどんどん簡約していくだけ。シンプル。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Machine&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reducible?&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
      &lt;span class="n"&gt;step&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>puts の秘密</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/16/puts-secrets.html"/>
    <id>http://blog.url.com/2014/10/16/puts-secrets.html</id>
    <published>2014-10-16T17:34:00+09:00</published>
    <updated>2014-12-16T10:43:16+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://www.rubytapas.com/"&gt;RubyTapas&lt;/a&gt; (Ruby プログラミングを扱った有料
スクリーンキャスト) のエピソード 171 &amp;lsquo;puts&amp;rsquo; を観てヘェーと思ったのでメ
モです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;puts は正しくは「プットエス」と読む:
&lt;code&gt;puts&lt;/code&gt; は C 関数の &lt;code&gt;puts(3)&lt;/code&gt; と同じく &amp;ldquo;put string&amp;rdquo; の略なので、「プッツ」
ではなく「プットエス」と読む。意味的にもこっちのほうが誤解がなくてよろしい。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改行の自動追加は別の write として扱われる:
複数スレッドでそれぞれ &lt;code&gt;puts&lt;/code&gt; すると、スレッド実行がインターリーブし
て次のように出力が混ざることがある。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'apple'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apple
orange
orangeapple

apple
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原因は引数文字列の出力と &lt;code&gt;puts&lt;/code&gt; が最後に自動的に追加する改行の出力が、
それぞれ別の &lt;code&gt;write&lt;/code&gt; として処理されるため。&lt;/p&gt;

&lt;p&gt;解決方法は、ワザと最後に改行を入れてやる。こうすると &lt;code&gt;puts&lt;/code&gt; が最後の改
行を取り除き、出力を一つの &lt;code&gt;write&lt;/code&gt; として処理するので混じらない。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"apple&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"orange&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
